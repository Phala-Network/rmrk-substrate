
//! Autogenerated weights for pallet_rmrk_market
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bogon`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./target/release/rmrk-substrate
    // benchmark
    // pallet
    // --chain
    // dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet
    // pallet_rmrk_market
    // --extrinsic
    // *
    // --steps
    // 50
    // --repeat
    // 20
    // --output
    // pallets/rmrk-market/src/weights.rs
    // --template
    // ./benchmarking/frame-weight-template.hbs
    // --detailed-log-output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_market.
pub trait WeightInfo {
    fn buy() -> Weight;
    fn list() -> Weight;
    fn unlist() -> Weight;
    fn make_offer() -> Weight;
    fn withdraw_offer() -> Weight;
    fn accept_offer() -> Weight;
}

/// Weights for pallet_rmrk_market using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket ListedNfts (r:1 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
        fn buy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1006`
        //  Estimated: `3700`
        // Minimum execution time: 101_000_000 picoseconds.
        Weight::from_parts(103_000_000, 3700)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
        }
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:0)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkMarket ListedNfts (r:0 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
        fn list() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `712`
        //  Estimated: `3700`
        // Minimum execution time: 28_000_000 picoseconds.
        Weight::from_parts(29_000_000, 3700)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
        }
            /// Storage: RmrkMarket ListedNfts (r:1 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
        fn unlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `498`
        //  Estimated: `3587`
        // Minimum execution time: 21_000_000 picoseconds.
        Weight::from_parts(22_000_000, 3587)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
        }
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
        fn make_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `401`
        //  Estimated: `3590`
        // Minimum execution time: 34_000_000 picoseconds.
        Weight::from_parts(35_000_000, 3590)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
        fn withdraw_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `550`
        //  Estimated: `3590`
        // Minimum execution time: 35_000_000 picoseconds.
        Weight::from_parts(35_000_000, 3590)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
        fn accept_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1006`
        //  Estimated: `3700`
        // Minimum execution time: 123_000_000 picoseconds.
        Weight::from_parts(126_000_000, 3700)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket ListedNfts (r:1 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
        fn buy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1006`
        //  Estimated: `3700`
        // Minimum execution time: 101_000_000 picoseconds.
        Weight::from_parts(103_000_000, 3700)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
        }
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:0)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkMarket ListedNfts (r:0 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
        fn list() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `712`
        //  Estimated: `3700`
        // Minimum execution time: 28_000_000 picoseconds.
        Weight::from_parts(29_000_000, 3700)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
        }
            /// Storage: RmrkMarket ListedNfts (r:1 w:1)
            /// Proof: RmrkMarket ListedNfts (max_values: None, max_size: Some(93), added: 2568, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
        fn unlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `498`
        //  Estimated: `3587`
        // Minimum execution time: 21_000_000 picoseconds.
        Weight::from_parts(22_000_000, 3587)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
        }
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
        fn make_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `401`
        //  Estimated: `3590`
        // Minimum execution time: 34_000_000 picoseconds.
        Weight::from_parts(35_000_000, 3590)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
        fn withdraw_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `550`
        //  Estimated: `3590`
        // Minimum execution time: 35_000_000 picoseconds.
        Weight::from_parts(35_000_000, 3590)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkMarket Offers (r:1 w:1)
            /// Proof: RmrkMarket Offers (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:0 w:1)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
        fn accept_offer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1006`
        //  Estimated: `3700`
        // Minimum execution time: 123_000_000 picoseconds.
        Weight::from_parts(126_000_000, 3700)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
        }
    }