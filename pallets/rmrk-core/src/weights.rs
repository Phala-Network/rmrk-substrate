
//! Autogenerated weights for pallet_rmrk_core
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bogon`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./target/release/rmrk-substrate
    // benchmark
    // pallet
    // --chain
    // dev
    // --execution=wasm
    // --wasm-execution=compiled
    // --pallet
    // pallet_rmrk_core
    // --extrinsic
    // *
    // --steps
    // 50
    // --repeat
    // 20
    // --output
    // pallets/rmrk-core/src/weights.rs
    // --template
    // ./benchmarking/frame-weight-template.hbs
    // --detailed-log-output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_core.
pub trait WeightInfo {
    fn create_collection() -> Weight;
    fn mint_nft() -> Weight;
    fn mint_nft_directly_to_nft(n: u32, ) -> Weight;
    fn destroy_collection() -> Weight;
    fn send_to_account(n: u32, ) -> Weight;
    fn send_to_nft(n: u32, ) -> Weight;
    fn burn_nft(n: u32, k: u32, ) -> Weight;
    fn accept_nft(n: u32, ) -> Weight;
    fn reject_nft(n: u32, ) -> Weight;
    fn change_collection_issuer() -> Weight;
    fn set_property() -> Weight;
    fn lock_collection() -> Weight;
    fn replace_resource() -> Weight;
    fn add_basic_resource(n: u32, ) -> Weight;
    fn add_composable_resource(n: u32, ) -> Weight;
    fn add_slot_resource(n: u32, ) -> Weight;
    fn accept_resource(n: u32, ) -> Weight;
    fn remove_resource(n: u32, ) -> Weight;
    fn accept_resource_removal(n: u32, ) -> Weight;
    fn set_priority(n: u32, k: u32, ) -> Weight;
}

/// Weights for pallet_rmrk_core using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:0 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:1)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
        fn create_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `142`
        //  Estimated: `3643`
        // Minimum execution time: 35_000_000 picoseconds.
        Weight::from_parts(36_000_000, 3643)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
        }
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:1 w:0)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
        fn mint_nft() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `499`
        //  Estimated: `3750`
        // Minimum execution time: 53_000_000 picoseconds.
        Weight::from_parts(54_000_000, 3750)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
        }
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:1 w:0)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 19]`.
        fn mint_nft_directly_to_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671 + n * (97 ±0)`
        //  Estimated: `3750 + n * (2597 ±0)`
        // Minimum execution time: 59_000_000 picoseconds.
        Weight::from_parts(55_209_857, 3750)
            // Standard Error: 42_785
            .saturating_add(Weight::from_parts(4_285_939, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:1)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
            /// Storage: Uniques ClassMetadataOf (r:0 w:1)
            /// Proof: Uniques ClassMetadataOf (max_values: None, max_size: Some(167), added: 2642, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:0 w:1)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
        fn destroy_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `568`
        //  Estimated: `3750`
        // Minimum execution time: 56_000_000 picoseconds.
        Weight::from_parts(57_000_000, 3750)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
        }
            /// Storage: Uniques Asset (r:20 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn send_to_account(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `655 + n * (97 ±0)`
        //  Estimated: `3700 + n * (2597 ±0)`
        // Minimum execution time: 44_000_000 picoseconds.
        Weight::from_parts(42_414_410, 3700)
            // Standard Error: 36_516
            .saturating_add(Weight::from_parts(4_309_340, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:21 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:2 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:2)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn send_to_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `774 + n * (104 ±0)`
        //  Estimated: `6410 + n * (2597 ±0)`
        // Minimum execution time: 55_000_000 picoseconds.
        Weight::from_parts(52_893_637, 6410)
            // Standard Error: 27_542
            .saturating_add(Weight::from_parts(4_443_149, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(7_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:20)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:20 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:20 w:20)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Properties (r:25 w:25)
            /// Proof: RmrkCore Properties (max_values: None, max_size: Some(348), added: 2823, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:39 w:19)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:20)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:20)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
            /// The range of component `k` is `[0, 25]`.
        fn burn_nft(n: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `660 + k * (25 ±0) + n * (203 ±0)`
        //  Estimated: `3750 + k * (2823 ±0) + n * (4848 ±2)`
        // Minimum execution time: 99_000_000 picoseconds.
        Weight::from_parts(101_000_000, 3750)
            // Standard Error: 102_469
            .saturating_add(Weight::from_parts(73_544_531, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 2823).saturating_mul(k.into()))
            .saturating_add(Weight::from_parts(0, 4848).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:2 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `664 + n * (42 ±0)`
        //  Estimated: `6184`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(28_655_906, 6184)
            // Standard Error: 5_517
            .saturating_add(Weight::from_parts(191_626, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: Uniques Asset (r:2 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:1 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn reject_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `913 + n * (64 ±0)`
        //  Estimated: `6184`
        // Minimum execution time: 90_000_000 picoseconds.
        Weight::from_parts(92_998_122, 6184)
            // Standard Error: 21_621
            .saturating_add(Weight::from_parts(417_752, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques OwnershipAcceptance (r:1 w:1)
            /// Proof: Uniques OwnershipAcceptance (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:2)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
        fn change_collection_issuer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `776`
        //  Estimated: `3750`
        // Minimum execution time: 60_000_000 picoseconds.
        Weight::from_parts(64_000_000, 3750)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Properties (r:0 w:1)
            /// Proof: RmrkCore Properties (max_values: None, max_size: Some(348), added: 2823, mode: MaxEncodedLen)
        fn set_property() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `510`
        //  Estimated: `3750`
        // Minimum execution time: 24_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3750)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
        fn lock_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `255`
        //  Estimated: `3750`
        // Minimum execution time: 16_000_000 picoseconds.
        Weight::from_parts(16_000_000, 3750)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
        fn replace_resource() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `322`
        //  Estimated: `3777`
        // Minimum execution time: 21_000_000 picoseconds.
        Weight::from_parts(22_000_000, 3777)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_basic_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(23_894_169, 3777)
            // Standard Error: 28_214
            .saturating_add(Weight::from_parts(4_071_639, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// Storage: RmrkCore EquippableBases (r:0 w:1)
            /// Proof: RmrkCore EquippableBases (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_composable_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 32_000_000 picoseconds.
        Weight::from_parts(28_818_077, 3777)
            // Standard Error: 25_205
            .saturating_add(Weight::from_parts(4_011_169, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// Storage: RmrkCore EquippableSlots (r:0 w:1)
            /// Proof: RmrkCore EquippableSlots (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_slot_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 33_000_000 picoseconds.
        Weight::from_parts(30_371_400, 3777)
            // Standard Error: 22_430
            .saturating_add(Weight::from_parts(3_937_983, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `508 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(23_581_856, 3777)
            // Standard Error: 24_322
            .saturating_add(Weight::from_parts(3_953_706, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn remove_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `584 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(24_219_883, 3777)
            // Standard Error: 24_121
            .saturating_add(Weight::from_parts(4_039_532, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_resource_removal(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `508 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(23_733_266, 3777)
            // Standard Error: 27_893
            .saturating_add(Weight::from_parts(4_056_959, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Priorities (r:0 w:24)
            /// Proof: RmrkCore Priorities (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 25]`.
            /// The range of component `k` is `[1, 20]`.
        fn set_priority(n: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `392 + k * (76 ±0)`
        //  Estimated: `3482 + k * (2597 ±0)`
        // Minimum execution time: 90_000_000 picoseconds.
        Weight::from_parts(12_769_493, 3482)
            // Standard Error: 28_091
            .saturating_add(Weight::from_parts(3_588_341, 0).saturating_mul(n.into()))
            // Standard Error: 35_482
            .saturating_add(Weight::from_parts(4_286_156, 0).saturating_mul(k.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(k.into()))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:0 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:1)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
        fn create_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `142`
        //  Estimated: `3643`
        // Minimum execution time: 35_000_000 picoseconds.
        Weight::from_parts(36_000_000, 3643)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
        }
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:1 w:0)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
        fn mint_nft() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `499`
        //  Estimated: `3750`
        // Minimum execution time: 53_000_000 picoseconds.
        Weight::from_parts(54_000_000, 3750)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
        }
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:1 w:0)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 19]`.
        fn mint_nft_directly_to_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671 + n * (97 ±0)`
        //  Estimated: `3750 + n * (2597 ±0)`
        // Minimum execution time: 59_000_000 picoseconds.
        Weight::from_parts(55_209_857, 3750)
            // Standard Error: 42_785
            .saturating_add(Weight::from_parts(4_285_939, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:1)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
            /// Storage: Uniques ClassMetadataOf (r:0 w:1)
            /// Proof: Uniques ClassMetadataOf (max_values: None, max_size: Some(167), added: 2642, mode: MaxEncodedLen)
            /// Storage: Uniques CollectionMaxSupply (r:0 w:1)
            /// Proof: Uniques CollectionMaxSupply (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
        fn destroy_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `568`
        //  Estimated: `3750`
        // Minimum execution time: 56_000_000 picoseconds.
        Weight::from_parts(57_000_000, 3750)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
        }
            /// Storage: Uniques Asset (r:20 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn send_to_account(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `655 + n * (97 ±0)`
        //  Estimated: `3700 + n * (2597 ±0)`
        // Minimum execution time: 44_000_000 picoseconds.
        Weight::from_parts(42_414_410, 3700)
            // Standard Error: 36_516
            .saturating_add(Weight::from_parts(4_309_340, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:21 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:2 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:0)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:0 w:2)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:2)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn send_to_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `774 + n * (104 ±0)`
        //  Estimated: `6410 + n * (2597 ±0)`
        // Minimum execution time: 55_000_000 picoseconds.
        Weight::from_parts(52_893_637, 6410)
            // Standard Error: 27_542
            .saturating_add(Weight::from_parts(4_443_149, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:20)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:20 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:20 w:20)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Properties (r:25 w:25)
            /// Proof: RmrkCore Properties (max_values: None, max_size: Some(348), added: 2823, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:39 w:19)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:20)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:20)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
            /// The range of component `k` is `[0, 25]`.
        fn burn_nft(n: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `660 + k * (25 ±0) + n * (203 ±0)`
        //  Estimated: `3750 + k * (2823 ±0) + n * (4848 ±2)`
        // Minimum execution time: 99_000_000 picoseconds.
        Weight::from_parts(101_000_000, 3750)
            // Standard Error: 102_469
            .saturating_add(Weight::from_parts(73_544_531, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 2823).saturating_mul(k.into()))
            .saturating_add(Weight::from_parts(0, 4848).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:2 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `664 + n * (42 ±0)`
        //  Estimated: `6184`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(28_655_906, 6184)
            // Standard Error: 5_517
            .saturating_add(Weight::from_parts(191_626, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: Uniques Asset (r:2 w:1)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Nfts (r:1 w:1)
            /// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Children (r:1 w:1)
            /// Proof: RmrkCore Children (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: Uniques Account (r:0 w:1)
            /// Proof: Uniques Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
            /// Storage: Uniques ItemPriceOf (r:0 w:1)
            /// Proof: Uniques ItemPriceOf (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn reject_nft(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `913 + n * (64 ±0)`
        //  Estimated: `6184`
        // Minimum execution time: 90_000_000 picoseconds.
        Weight::from_parts(92_998_122, 6184)
            // Standard Error: 21_621
            .saturating_add(Weight::from_parts(417_752, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques OwnershipAcceptance (r:1 w:1)
            /// Proof: Uniques OwnershipAcceptance (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
            /// Storage: Uniques Class (r:1 w:1)
            /// Proof: Uniques Class (max_values: None, max_size: Some(178), added: 2653, mode: MaxEncodedLen)
            /// Storage: System Account (r:1 w:1)
            /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
            /// Storage: Uniques ClassAccount (r:0 w:2)
            /// Proof: Uniques ClassAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
        fn change_collection_issuer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `776`
        //  Estimated: `3750`
        // Minimum execution time: 60_000_000 picoseconds.
        Weight::from_parts(64_000_000, 3750)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:1 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Properties (r:0 w:1)
            /// Proof: RmrkCore Properties (max_values: None, max_size: Some(348), added: 2823, mode: MaxEncodedLen)
        fn set_property() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `510`
        //  Estimated: `3750`
        // Minimum execution time: 24_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3750)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:1)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
        fn lock_collection() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `255`
        //  Estimated: `3750`
        // Minimum execution time: 16_000_000 picoseconds.
        Weight::from_parts(16_000_000, 3750)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
        fn replace_resource() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `322`
        //  Estimated: `3777`
        // Minimum execution time: 21_000_000 picoseconds.
        Weight::from_parts(22_000_000, 3777)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_basic_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(23_894_169, 3777)
            // Standard Error: 28_214
            .saturating_add(Weight::from_parts(4_071_639, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// Storage: RmrkCore EquippableBases (r:0 w:1)
            /// Proof: RmrkCore EquippableBases (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_composable_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 32_000_000 picoseconds.
        Weight::from_parts(28_818_077, 3777)
            // Standard Error: 25_205
            .saturating_add(Weight::from_parts(4_011_169, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// Storage: RmrkCore EquippableSlots (r:0 w:1)
            /// Proof: RmrkCore EquippableSlots (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn add_slot_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + n * (98 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 33_000_000 picoseconds.
        Weight::from_parts(30_371_400, 3777)
            // Standard Error: 22_430
            .saturating_add(Weight::from_parts(3_937_983, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `508 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(23_581_856, 3777)
            // Standard Error: 24_322
            .saturating_add(Weight::from_parts(3_953_706, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: RmrkCore Collections (r:1 w:0)
            /// Proof: RmrkCore Collections (max_values: None, max_size: Some(285), added: 2760, mode: MaxEncodedLen)
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn remove_resource(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `584 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(24_219_883, 3777)
            // Standard Error: 24_121
            .saturating_add(Weight::from_parts(4_039_532, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Resources (r:1 w:1)
            /// Proof: RmrkCore Resources (max_values: None, max_size: Some(312), added: 2787, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 20]`.
        fn accept_resource_removal(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `508 + n * (76 ±0)`
        //  Estimated: `3777 + n * (2597 ±0)`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(23_733_266, 3777)
            // Standard Error: 27_893
            .saturating_add(Weight::from_parts(4_056_959, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(n.into()))
        }
            /// Storage: Uniques Asset (r:20 w:0)
            /// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
            /// Storage: RmrkCore Lock (r:1 w:0)
            /// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
            /// Storage: RmrkCore Priorities (r:0 w:24)
            /// Proof: RmrkCore Priorities (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
            /// The range of component `n` is `[1, 25]`.
            /// The range of component `k` is `[1, 20]`.
        fn set_priority(n: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `392 + k * (76 ±0)`
        //  Estimated: `3482 + k * (2597 ±0)`
        // Minimum execution time: 90_000_000 picoseconds.
        Weight::from_parts(12_769_493, 3482)
            // Standard Error: 28_091
            .saturating_add(Weight::from_parts(3_588_341, 0).saturating_mul(n.into()))
            // Standard Error: 35_482
            .saturating_add(Weight::from_parts(4_286_156, 0).saturating_mul(k.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 2597).saturating_mul(k.into()))
        }
    }