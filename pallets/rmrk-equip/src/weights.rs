
//! Autogenerated weights for pallet_rmrk_equip
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `w40ar3y0u.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/rmrk-substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_rmrk_equip
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/rmrk-equip/src/weights.rs
// --template
// ./benchmarking/frame-weight-template.hbs
// --detailed-log-output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_equip.
pub trait WeightInfo {
	fn change_base_issuer() -> Weight;
	fn equip() -> Weight;
	fn unequip() -> Weight;
	fn equippable() -> Weight;
	fn equippable_add() -> Weight;
	fn equippable_remove() -> Weight;
	fn theme_add() -> Weight;
	fn create_base() -> Weight;
}

/// Weights for pallet_rmrk_equip using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: RmrkEquip Bases (r:1 w:1)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	fn change_base_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3769`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3769)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkCore Nfts (r:2 w:1)
	/// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
	/// Storage: RmrkCore Lock (r:2 w:0)
	/// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Equippings (r:1 w:1)
	/// Proof: RmrkEquip Equippings (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: Uniques Asset (r:2 w:0)
	/// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
	/// Storage: RmrkCore EquippableBases (r:1 w:0)
	/// Proof: RmrkCore EquippableBases (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: RmrkCore EquippableSlots (r:1 w:0)
	/// Proof: RmrkCore EquippableSlots (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:0)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1127`
		//  Estimated: `33223`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(63_000_000, 33223)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkCore Lock (r:2 w:0)
	/// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Equippings (r:1 w:1)
	/// Proof: RmrkEquip Equippings (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: RmrkCore Nfts (r:1 w:1)
	/// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
	/// Storage: Uniques Asset (r:2 w:0)
	/// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
	fn unequip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `979`
		//  Estimated: `19391`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(43_000_000, 19391)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Themes (r:1 w:2)
	/// Proof: RmrkEquip Themes (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	fn theme_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `7676`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 7676)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkEquip NextBaseId (r:1 w:1)
	/// Proof: RmrkEquip NextBaseId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Bases (r:0 w:1)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	fn create_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1489`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: RmrkEquip Bases (r:1 w:1)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	fn change_base_issuer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3769`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3769)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkCore Nfts (r:2 w:1)
	/// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
	/// Storage: RmrkCore Lock (r:2 w:0)
	/// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Equippings (r:1 w:1)
	/// Proof: RmrkEquip Equippings (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: Uniques Asset (r:2 w:0)
	/// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
	/// Storage: RmrkCore EquippableBases (r:1 w:0)
	/// Proof: RmrkCore EquippableBases (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: RmrkCore EquippableSlots (r:1 w:0)
	/// Proof: RmrkCore EquippableSlots (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:0)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1127`
		//  Estimated: `33223`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(63_000_000, 33223)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkCore Lock (r:2 w:0)
	/// Proof: RmrkCore Lock (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Equippings (r:1 w:1)
	/// Proof: RmrkEquip Equippings (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: RmrkCore Nfts (r:1 w:1)
	/// Proof: RmrkCore Nfts (max_values: None, max_size: Some(235), added: 2710, mode: MaxEncodedLen)
	/// Storage: Uniques Asset (r:2 w:0)
	/// Proof: Uniques Asset (max_values: None, max_size: Some(122), added: 2597, mode: MaxEncodedLen)
	fn unequip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `979`
		//  Estimated: `19391`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(43_000_000, 19391)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Parts (r:1 w:1)
	/// Proof: RmrkEquip Parts (max_values: None, max_size: Some(567), added: 3042, mode: MaxEncodedLen)
	fn equippable_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `7801`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7801)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: RmrkEquip Bases (r:1 w:0)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Themes (r:1 w:2)
	/// Proof: RmrkEquip Themes (max_values: None, max_size: Some(442), added: 2917, mode: MaxEncodedLen)
	fn theme_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `7676`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 7676)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: RmrkEquip NextBaseId (r:1 w:1)
	/// Proof: RmrkEquip NextBaseId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: RmrkEquip Bases (r:0 w:1)
	/// Proof: RmrkEquip Bases (max_values: None, max_size: Some(304), added: 2779, mode: MaxEncodedLen)
	fn create_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1489`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}